// Generated by the protocol buffer compiler.  DO NOT EDIT!
package com.bielu.protobuf;

public interface GeoDataNano {

  public static final class GeoData extends
      com.google.protobuf.nano.MessageNano {

    private static volatile GeoData[] _emptyArray;
    public static GeoData[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new GeoData[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional string latitude = 1;
    public java.lang.String latitude;

    // optional string longitude = 2;
    public java.lang.String longitude;

    // optional string country = 3;
    public java.lang.String country;

    // optional string countryCode = 4;
    public java.lang.String countryCode;

    // optional string city = 5;
    public java.lang.String city;

    public GeoData() {
      clear();
    }

    public GeoData clear() {
      latitude = "";
      longitude = "";
      country = "";
      countryCode = "";
      city = "";
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (!this.latitude.equals("")) {
        output.writeString(1, this.latitude);
      }
      if (!this.longitude.equals("")) {
        output.writeString(2, this.longitude);
      }
      if (!this.country.equals("")) {
        output.writeString(3, this.country);
      }
      if (!this.countryCode.equals("")) {
        output.writeString(4, this.countryCode);
      }
      if (!this.city.equals("")) {
        output.writeString(5, this.city);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (!this.latitude.equals("")) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(1, this.latitude);
      }
      if (!this.longitude.equals("")) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(2, this.longitude);
      }
      if (!this.country.equals("")) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(3, this.country);
      }
      if (!this.countryCode.equals("")) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(4, this.countryCode);
      }
      if (!this.city.equals("")) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(5, this.city);
      }
      return size;
    }

    @Override
    public GeoData mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            this.latitude = input.readString();
            break;
          }
          case 18: {
            this.longitude = input.readString();
            break;
          }
          case 26: {
            this.country = input.readString();
            break;
          }
          case 34: {
            this.countryCode = input.readString();
            break;
          }
          case 42: {
            this.city = input.readString();
            break;
          }
        }
      }
    }

    public static GeoData parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new GeoData(), data);
    }

    public static GeoData parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new GeoData().mergeFrom(input);
    }
  }
}
